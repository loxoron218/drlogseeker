use std::sync::OnceLock;

use regex::Regex;

/// A lazily-initialized, thread-safe regular expression for parsing DR (Dynamic Range) values.
///
/// This regex is designed to match the DR value from log files generated by tools like
/// the TT DR Offline Meter. It specifically captures the numeric value or "ERR" status
/// from lines in several formats:
/// - English: "Official DR value: DR12"
/// - Russian: "Реальные значения DR: DR12"
/// - Album/EP: "Official EP/Album DR: 13"
pub static DR_REGEX: OnceLock<Regex> = OnceLock::new();

/// Returns a static reference to the compiled DR regex, initializing it on first use.
///
/// This function uses `OnceLock` to ensure the regex is compiled only once,
/// making subsequent accesses fast and thread-safe.
pub fn get_dr_regex() -> &'static Regex {
    DR_REGEX.get_or_init(|| {
        Regex::new(r"Official DR value:\s*DR(\d+|ERR)|Реальные значения DR:\s*DR(\d+|ERR)|Official EP/Album DR:\s*(\d+|ERR)").unwrap()
    })
}

/// A constant array defining the RGB color mapping for visualizing DR values.
///
/// The array is indexed by the DR value. The colors provide a visual gradient
/// from red (low DR, highly compressed) to green (high DR, very dynamic).
///
/// - **DR0-7 (Red)**: Critically compressed.
/// - **DR8 (Dark Orange)**: Moderately compressed.
/// - **DR9-10 (Orange/Yellow)**: Acceptable compression.
/// - **DR11-13 (Lime/Green)**: Good dynamic range.
/// - **DR14+ (Bright Green)**: Excellent dynamic range.
///
/// Values of DR14 or higher are capped at the last color in the array.
pub const DR_COLORS: [(u8, u8, u8); 15] = [
    (255, 0, 0),     // DR0
    (255, 0, 0),     // DR1
    (255, 0, 0),     // DR2
    (255, 0, 0),     // DR3
    (255, 0, 0),     // DR4
    (255, 0, 0),     // DR5
    (255, 0, 0),     // DR6
    (255, 0, 0),     // DR7
    (255, 72, 0),    // DR8 - #ff4800
    (255, 145, 0),   // DR9 - #ff9100
    (255, 217, 0),   // DR10 - #ffd900
    (217, 255, 0),   // DR11 - #d9ff00
    (144, 255, 0),   // DR12 - #90ff00
    (72, 255, 0),    // DR13 - #48ff00
    (0, 255, 0),     // DR14 - #00ff00
];